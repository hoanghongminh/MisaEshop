{"remainingRequest":"C:\\Users\\Admin\\Downloads\\Web\\Web\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\Admin\\Downloads\\Web\\Web\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\Admin\\Downloads\\Web\\Web\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Admin\\Downloads\\Web\\Web\\src\\views\\dictionary\\stores\\StoreListDetail.vue?vue&type=template&id=bbdc8a7c&","dependencies":[{"path":"C:\\Users\\Admin\\Downloads\\Web\\Web\\src\\views\\dictionary\\stores\\StoreListDetail.vue","mtime":1618202111495},{"path":"C:\\Users\\Admin\\Downloads\\Web\\Web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Admin\\Downloads\\Web\\Web\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\Admin\\Downloads\\Web\\Web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Admin\\Downloads\\Web\\Web\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}