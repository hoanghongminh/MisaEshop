{"remainingRequest":"C:\\Users\\hhminh\\Desktop\\test\\MisaEshop\\Web\\Web\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\hhminh\\Desktop\\test\\MisaEshop\\Web\\Web\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\hhminh\\Desktop\\test\\MisaEshop\\Web\\Web\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\hhminh\\Desktop\\test\\MisaEshop\\Web\\Web\\src\\views\\dictionary\\stores\\StoreListDetail.vue?vue&type=template&id=bbdc8a7c&","dependencies":[{"path":"C:\\Users\\hhminh\\Desktop\\test\\MisaEshop\\Web\\Web\\src\\views\\dictionary\\stores\\StoreListDetail.vue","mtime":1618568165742},{"path":"C:\\Users\\hhminh\\Desktop\\test\\MisaEshop\\Web\\Web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1618535890829},{"path":"C:\\Users\\hhminh\\Desktop\\test\\MisaEshop\\Web\\Web\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1618535899515},{"path":"C:\\Users\\hhminh\\Desktop\\test\\MisaEshop\\Web\\Web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1618535890829},{"path":"C:\\Users\\hhminh\\Desktop\\test\\MisaEshop\\Web\\Web\\node_modules\\vue-loader\\lib\\index.js","mtime":1618535899515}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}